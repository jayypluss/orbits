[gd_scene load_steps=20 format=2]

[ext_resource path="res://src/gui/screens/global_gameplay/pause_screen/pause_screen.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/levels/level_1/level_1.gd" type="Script" id=2]
[ext_resource path="res://src/levels/level_1/level_1_env.tres" type="Environment" id=3]
[ext_resource path="res://src/player/player.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/enemy/enemy.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/textures/noise_texture_1.jpg" type="Texture" id=6]
[ext_resource path="res://src/orb/orb.tscn" type="PackedScene" id=7]

[sub_resource type="CylinderShape" id=12]
height = 0.5
radius = 30.0

[sub_resource type="CylinderMesh" id=13]
top_radius = 30.0
bottom_radius = 30.0
height = 0.5

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0.407843, 0.388235, 0.180392, 1 )

[sub_resource type="BoxShape" id=3]
extents = Vector3( 10, 0.1, 10 )

[sub_resource type="CubeMesh" id=4]
size = Vector3( 20, 0.2, 20 )

[sub_resource type="SpatialMaterial" id=6]
albedo_color = Color( 0.215686, 0.396078, 0.239216, 1 )

[sub_resource type="SphereShape" id=14]

[sub_resource type="SphereMesh" id=15]

[sub_resource type="Shader" id=16]
code = "// From https://godotshaders.com/shader/3d-sun-shader/

shader_type spatial;
render_mode specular_schlick_ggx;

uniform float Glow_Power : hint_range(0,10) = 3;
uniform float Lightness_Difference : hint_range(0,10) = 3;
uniform vec4 Sun_Color : hint_color;

uniform sampler2D voronoi_noise;
uniform sampler2D emission_noise;
varying vec3 vertex_pos;
uniform float waveSpeed : hint_range(0,1) = 0.1;
uniform float fresnel : hint_range(0,2) = 1.0;

uniform float scale : hint_range(0,2) = 0.01;
uniform float blendSharpness : hint_range(0,2) = 0.0;

// TRIPLANAR FUNCTION
vec4 triplanar_texture(vec3 position, vec3 normal, vec2 offset, sampler2D noise) {
	vec4 colX = texture(noise, position.xy * scale + offset);
	vec4 colY = texture(noise, position.xz * scale + offset);
	vec4 colZ = texture(noise, position.zy * scale + offset);
	
	vec3 blendWeight = abs(normal);
	blendWeight = vec3(pow(blendWeight.x, blendSharpness), pow(blendWeight.y, blendSharpness), pow(blendWeight.z, blendSharpness));
	blendWeight /= (blendWeight.x + blendWeight.y + blendWeight.z);
	
	return colX * blendWeight.x + colY * blendWeight.y + colZ * blendWeight.z;
}

void vertex() {
	vertex_pos = VERTEX;
}

void fragment() {
	// Fresnel
	float fresnel_out = pow(fresnel - clamp(dot(NORMAL, VIEW), 0.0, fresnel), fresnel);

	vec2 waveOffsetA = vec2(TIME * waveSpeed, TIME * waveSpeed * 0.8);
	vec2 waveOffsetB = vec2(TIME * waveSpeed * - 0.8, TIME * waveSpeed * -0.3);
	vec2 result_offset = waveOffsetA + waveOffsetB;

	vec3 cloud_tex = triplanar_texture(vertex_pos, NORMAL, result_offset, voronoi_noise).rgb;
	vec3 cloud_tex_with_light = cloud_tex * vec3(Lightness_Difference);
	vec3 cloud_tex_with_light_with_color = cloud_tex_with_light * Sun_Color.rgb;
	vec3 cloud_tex_with_light_with_color_with_glow = vec3(Glow_Power) * cloud_tex_with_light_with_color;

	vec3 noise_tex = triplanar_texture(vertex_pos, NORMAL, result_offset, emission_noise).rgb;
	vec3 result = cloud_tex_with_light_with_color_with_glow * noise_tex;

	EMISSION = vec3(fresnel_out) * result;
}"

[sub_resource type="OpenSimplexNoise" id=18]

[sub_resource type="NoiseTexture" id=19]
noise = SubResource( 18 )

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/Glow_Power = 5.0
shader_param/Lightness_Difference = 3.0
shader_param/Sun_Color = Color( 1, 0.560784, 0, 1 )
shader_param/waveSpeed = 1.0
shader_param/fresnel = 1.7
shader_param/scale = 2.0
shader_param/blendSharpness = 0.0
shader_param/voronoi_noise = ExtResource( 6 )
shader_param/emission_noise = SubResource( 19 )

[node name="Level1" type="Spatial"]
script = ExtResource( 2 )

[node name="PauseLayer" parent="." instance=ExtResource( 1 )]

[node name="StaticGround" type="StaticBody" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="StaticGround"]
shape = SubResource( 12 )

[node name="MeshInstance" type="MeshInstance" parent="StaticGround"]
mesh = SubResource( 13 )
material/0 = SubResource( 5 )

[node name="MovingGround" type="KinematicBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -70.4963 )
collision_layer = 2

[node name="CollisionShape" type="CollisionShape" parent="MovingGround"]
shape = SubResource( 3 )

[node name="MeshInstance" type="MeshInstance" parent="MovingGround"]
mesh = SubResource( 4 )
material/0 = SubResource( 6 )

[node name="HemisphericLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 127.668, -12.5896 )
visible = false
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 3 )

[node name="Player" parent="." instance=ExtResource( 4 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0920637, 3.17999, -2.45488 )

[node name="Enemy" parent="." instance=ExtResource( 5 )]

[node name="Orb" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.63885, -12.0856 )
__meta__ = {
"_edit_group_": true
}

[node name="Area" type="Area" parent="Orb"]

[node name="CollisionShape" type="CollisionShape" parent="Orb/Area"]
shape = SubResource( 14 )

[node name="MeshInstance" type="MeshInstance" parent="Orb"]
mesh = SubResource( 15 )
material/0 = SubResource( 17 )

[node name="KinematicBody" parent="." instance=ExtResource( 7 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1.02969, 3.93146, -8.14577 )
